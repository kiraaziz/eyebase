generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") 
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  // id         Int      @id @default(sequence())
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  otp           String?
  otpExpierd    Boolean      @default(false)
  optDate       DateTime
  image         String?
  accounts      Account[]
  sessions      Session[]
  activated     Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt()
  membership    membership[]
}

model Project {
  id         String       @id @default(cuid())
  name       String?
  image      String?
  blocked    Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt()
  membership membership[]
  Collection Collection[]
  File       File[]
  apiKey     apiKey[]
}

model membership {
  id        String   @id @default(cuid())
  userId    String?
  tempMail  String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role      String
  blocked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Collection {
  id          String        @id @default(cuid())
  name        String?
  image       String?
  projectId   String
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()
  Document    Document[]
  permissions permissions[]
}

model Document {
  id           String     @id @default(cuid())
  content      Json
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt()
}

model apiKey {
  id          String        @id @default(cuid())
  name        String
  key         String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()
  projectId   String
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Activity    Activity[]
  permissions permissions[]
}

model permissions {
  id           String     @id @default(cuid())
  apiKeyId     String
  apiKey       apiKey     @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  canList      Boolean    @default(false)
  canRead      Boolean    @default(false)
  canCreate    Boolean    @default(false)
  canUpdate    Boolean    @default(false)
  canDelete    Boolean    @default(false)
}

model File {
  id          String   @id @default(cuid())
  name        String?
  type        String
  firebaseRef String
  size        Decimal
  URL         String?
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

model Activity {
  id        String   @id @default(cuid())
  day       Int
  month     Int
  year      Int
  date      String
  type      String
  apiKeyId  String
  apiKey    apiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
